<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoniu&#39;s Blog</title>
  
  <subtitle>This blog is rarely maintained :(</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-30T11:33:37.257Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiaoniu Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k近邻</title>
    <link href="http://yoursite.com/2019/07/30/2017-07-04-k-NN/"/>
    <id>http://yoursite.com/2019/07/30/2017-07-04-k-NN/</id>
    <published>2019-07-30T11:33:37.257Z</published>
    <updated>2019-07-30T11:33:37.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k近邻法"><a href="#k近邻法" class="headerlink" title="k近邻法"></a>k近邻法</h1><p>针对分类问题</p><p><strong>没有显式的学习过程，其训练集即为其“模型”</strong></p><h2 id="k近邻算法"><a href="#k近邻算法" class="headerlink" title="k近邻算法"></a>k近邻算法</h2><p>输入：训练数据集</p><script type="math/tex; mode=display">T={(x_1,y_1),(x_2,y_2),...,(x_N,y_N)}</script><p>其中，$x_i\in\mathcal{X}\subseteq R^n$为实例的特征向量，$y_i \in \mathcal{Y} ={c_1,c_2,…,c_K}$为实例类别，$i=1,2,…N$;</p><p>​输出：实例$x$所属类$y$</p><ol><li>根据给定的<strong>距离度量</strong>，在训练集$T$中找出与$x$距离最近的$k$个点($k$近邻)，包含这$k$个点的$x$的邻域记作$N_k(x)$</li><li>在$N_k(x)$中根据分类决策规则，(最典型的 <strong>多数表决</strong>)决定$x$的类别$y$：<script type="math/tex; mode=display">y=arg \max \limits_{c_j} \sum \limits_{x_i\in N_k(x)} I(y_i=c_j),i=1,2,...,N; j=1,2,...K</script>其中，$I$为指示函数，<script type="math/tex; mode=display">I=\begin {cases}1,y_i=c_j \\ 0,y_i\ne c_j \end{cases}{}</script><strong>没有类似感知机中的参数的学习过程，直接将输入的训练数据作为模型</strong></li></ol><h2 id="k近邻模型"><a href="#k近邻模型" class="headerlink" title="k近邻模型"></a>k近邻模型</h2><h3 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h3><p>不同的距离度量算出的距离不同，其确定的最近邻点也不同</p><blockquote><p>距离度量：对于一个度量空间，其距离度量可以有多种<br>一般为欧式距离</p><script type="math/tex; mode=display">d(x_i,x_j)=\sqrt{\sum \limits_{l=1} \limits^{n} |x_i^{(l)}-x_j^{(l)}|^2}</script><p>更一般的，$L_p$距离</p><script type="math/tex; mode=display">L_p(x_i,x_j)=\sqrt[p]{\sum \limits_{l=1} \limits^{n} |x_i^{(l)}-x_j^{(l)}|^p}, p\geqslant1</script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2017-07-04-k-NN/L_p%20distance.png" alt="不同p值下与零点距离为1的点集" title>                </div>                <div class="image-caption">不同p值下与零点距离为1的点集</div>            </figure><p>邻域：包含该点的开球，一般以该点为中心</p></blockquote><h3 id="k值的选择"><a href="#k值的选择" class="headerlink" title="k值的选择"></a>k值的选择</h3><p>若$k$较小，即相当于用一个较小的邻域中的训练实例进行预测</p><ul><li><em>近似误差</em>将减小，只有与实例较为接近的训练实例才会对预测结果起作用</li><li><em>估计误差</em>将增大，预测结果对近邻的实例点更敏感。若附近的点恰好为噪声，预测便出错</li><li>$k$值减小将使整体模型变得复杂，易<strong>过拟合</strong></li><li>$k=1$，成为<em>最近邻算法</em></li></ul><p>若$k$较大，即相当于用一个较大的邻域中的训练实例进行预测</p><ul><li>估计误差减小，近似误差增大。较远的数据点也将影响预测</li><li>整体模型变得简单</li><li>$k$过大($N$)，模型过于简单，忽略训练集中大量有用信息，不可取</li></ul><p>如何确定$k$值？<strong>交叉验证</strong></p><blockquote><p>如果样本充足，比较简单的方法是将数据集分为三部分：训练集，验证集，测试集<br>用训练集训练多个不同复杂度的模型，用验证集选择最佳模型，用测试集进行评估<br><strong>大部分应用中数据不充足，交叉验证</strong><br>即分为训练集与测试集，重复使用数据，反复训练</p><ul><li>简单交叉验证<br>分为训练集与测试集，用训练集训练出多个模型，用测试集评价，选出误差最小的模型</li><li>S折交叉验证<br>将数据切分为S个等大子集，用S-1个子集数据进行训练，剩下一个作为测试集。选取训练出的模型中误差最小的那一个<ul><li>S=N时，称为留一交叉验证</li></ul></li></ul></blockquote><h3 id="分类决策规则"><a href="#分类决策规则" class="headerlink" title="分类决策规则"></a>分类决策规则</h3><p>往往是多数表决<br>若记分类的损失函数为0-1损失函数</p><script type="math/tex; mode=display">L(Y,f(X))=\begin{cases}1,Y\ne f(X) \\0,Y=f(X) \end{cases}</script><p>那么将有：多数表决等价于经验风险最小化（即误分类率最小化）</p><blockquote><p> 误分类率：<script type="math/tex">\frac{1}{k}\sum\limits_{x_i\in N_k(x)}I(y_i\neq c_j)=1-\frac{1}{k}\sum\limits_{x_i\in N_k(x)}I(y_i= c_j)</script></p></blockquote><h2 id="k近邻法的实现：kd树"><a href="#k近邻法的实现：kd树" class="headerlink" title="k近邻法的实现：kd树"></a>k近邻法的实现：kd树</h2><p>最简单的$k$ 近邻法的实现：线性扫描，遍历整个训练集计算距离</p><p> $kd$ 树：对$k$维空间中的实例点进行储存，以进行快速检索的数据结构</p><ul><li>二叉树，构造时不断用超平面切分空间，构成一系列超矩形区域。树的每一个结点对应一个超矩形区域</li></ul><p><strong>这里的$k$是指$k$维空间，与$k$近邻法的$k$意义不同</strong></p><h3 id="算法：构造kd树"><a href="#算法：构造kd树" class="headerlink" title="算法：构造kd树"></a>算法：构造kd树</h3><p>​    输入：$k$维空间数据集<script type="math/tex">T=\{x_1,x_2,...,x_N\}</script></p><p>其中<script type="math/tex">x_i=(x_i^{(1)},x_i^{(2)},...,x_i^{(k)})^T,i=1,2,...,N</script></p><p>​    输出：$kd$树</p><p>​    （1）开始：根节点：包含<script type="math/tex">T</script>的$k$维空间的超矩形区域</p><p>​    <script type="math/tex">x^{(1)}</script>为坐标轴，以<script type="math/tex">T</script>中所有实例的<script type="math/tex">x^{(1)}</script>坐标的中位数作为切分点，将根节点的超矩形区域分为两个子区域。</p><p>​    在这个根结点中，保存所有落在该切分超平面上的实例点。</p><p>​    （2）重复：对每个深度为<script type="math/tex">j</script>的结点，记<script type="math/tex">l=j(modk)+1</script>，选择<script type="math/tex">x^{(l)}</script>为切分坐标轴，以<strong>该结点的超矩形区域</strong>中所有实例的<script type="math/tex">x^{(l)}</script>坐标的中位数作为切分点，将该节点的超矩形区域分为两个子区域。</p><p>​    在这个结点中，保存所有落在该切分超平面上的实例点。</p><p>​    （3）当两个子区域中均无实例存在时停止。$kd$树构造完毕</p><h4 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h4><script type="math/tex; mode=display">T=\{(2,3)^T,(5,4)^T,(9,6)^T,(4,7)^T,(8,1)^T,(7,2)^T\}</script><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2017-07-04-k-NN/tree.png" alt="Tree" title>                </div>                <div class="image-caption">Tree</div>            </figure><h3 id="搜索kd树"><a href="#搜索kd树" class="headerlink" title="搜索kd树"></a>搜索kd树</h3><p>$kd$树的每个结点的内容</p><ul><li>一个超平面，以及其上面的实例点，被保存于该结点中</li><li>一个超矩形区域</li></ul><h4 id="最近邻搜索算法"><a href="#最近邻搜索算法" class="headerlink" title="最近邻搜索算法"></a>最近邻搜索算法</h4><p>​    输入：$kd$树，目标点$x$</p><p>​    输出：$x$的最近邻</p><p>​    （1）找出包含目标点的叶结点：从根结点开始，递归地向下访问：如果$x$当前维的坐标小于切分点的坐标，进入左子结点，否则进入右子结点。直到访问到叶结点为止。</p><p>​    （2）记该叶结点为“当前最近点”</p><p>​    （3）从当前最近点开始，递归地往根结点回退，在每个结点进行如下操作：</p><p>​    （a）若当前结点中<strong>所保存的实例点</strong>比当前最近点的距离短，以该实例点为当前最近点</p><p>​    （b）检查当前结点的父结点的另一子结点对应的超矩形区域，是否与当前最短距离为半径、$x$为球心形成的超球体相交。</p><p>​        若相交，则<em>该子结点对应的超矩形区域中的实例点可能存在比当前最近点更近的点</em>，移至这一子结点，以其为根结点，递归地进行最近邻搜索（step（1））</p><p>​        若不相交，向根结点方向回退</p><p>​    （4）回退到根结点时搜索结束。最后的当前最近点即为$x$的最近邻点</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2017-07-04-k-NN/ex.png" alt="kd tree" title>                </div>                <div class="image-caption">kd tree</div>            </figure><h4 id="如何改进以寻找k近邻？"><a href="#如何改进以寻找k近邻？" class="headerlink" title="如何改进以寻找k近邻？"></a>如何改进以寻找k近邻？</h4><p>将当前最近点改为一个长为$k$的链表，初始化为无限远点。</p><p>每次比较，以链表末尾（当前$k$近邻中最远点）作为当前最近点来比较。每次更新链表时插入新结点，移除末结点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;k近邻法&quot;&gt;&lt;a href=&quot;#k近邻法&quot; class=&quot;headerlink&quot; title=&quot;k近邻法&quot;&gt;&lt;/a&gt;k近邻法&lt;/h1&gt;&lt;p&gt;针对分类问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有显式的学习过程，其训练集即为其“模型”&lt;/strong&gt;&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OrayVPN failed to ping each other when connecting to eduroam</title>
    <link href="http://yoursite.com/2018/12/14/2018-12-14-OrayVPN/"/>
    <id>http://yoursite.com/2018/12/14/2018-12-14-OrayVPN/</id>
    <published>2018-12-13T16:00:00.000Z</published>
    <updated>2019-07-30T11:35:04.566Z</updated>
    
    <content type="html"><![CDATA[<p>A strange thing happened this morning. I failed to connect my desktop with my laptop connecting to eduroam, but succeeded when connecting to my cellphone’s hotspot.</p><p>By runing <code>route print</code> in CMD, the interface of that entry is found to be set to WLAN:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-12-14-OrayVPN/1.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>However, when connecting to hotspot, the interface is set to the virtual adapter of VPN.</p><p>The solution is manully delete and create a new entry with correct interface.<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route delete &lt;entryIP&gt;</span><br><span class="line">route add &lt;entryIP&gt; mask &lt;MASK&gt; &lt;GATEWAY&gt; &lt;INTERFACE&gt; metric <span class="number">56</span> <span class="keyword">if</span> &lt;INTERFACE&gt;</span><br></pre></td></tr></table></figure></p><p>The interface id is shown in <code>route print</code><br>Or, I set the adapter’s mask to cover all the devices in my VPN, so just delete that entry would be fine.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A strange thing happened this morning. I failed to connect my desktop with my laptop connecting to eduroam, but succeeded when connecting
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add Bash-here to right-click context</title>
    <link href="http://yoursite.com/2018/01/23/2018-01-23-add-bash-here/"/>
    <id>http://yoursite.com/2018/01/23/2018-01-23-add-bash-here/</id>
    <published>2018-01-22T16:00:00.000Z</published>
    <updated>2019-07-30T11:35:04.564Z</updated>
    
    <content type="html"><![CDATA[<p>Method to add <code>Bash here</code> in your right-click context.</p><h2 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h2><p>In cmd/powershell, <code>bash</code> command will get into wsl bash and set current directory.</p><p>In regedit, add items to <code>HKEY_CLASSES_ROOT\Directory\Background\shell</code> to add thing in your  right-click context at a directory’s blank background. </p><p>Further more, <code>HKEY_CLASSES_ROOT\Folder\shell</code> or <code>HKEY_CLASSES_ROOT\Directory\shell</code> is for right-click on a folder.</p><h2 id="Add-Bash-here-in-right-click-context-at-dir’s-background"><a href="#Add-Bash-here-in-right-click-context-at-dir’s-background" class="headerlink" title="Add Bash here in right click context at dir’s background"></a>Add <code>Bash here</code> in right click context at dir’s background</h2><p>If the <code>bash.exe</code> is in your system PATH, these codes would work. Otherwise, you have to specify the path of <code>bash.exe</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\WSL]</span><br><span class="line">@=&quot;Bash here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\WSL\command]</span><br><span class="line">@=&quot;bash&quot;</span><br></pre></td></tr></table></figure><p>Save texts above to a <code>.reg</code> file and run it.</p><p>Another interesting thing, when I install Everything, I forgot to add it to my right click context. So in Powershell, I ran <code>&amp; &#39;C:\Program Files\Everything\Everything.exe&#39; --help</code> and find out <code>-p</code> parameter can pass the current folder to Everything and open an instance. Thus:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Everything]</span><br><span class="line"></span><br><span class="line">@=&quot;Everything here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Everything\command]</span><br><span class="line"></span><br><span class="line">@=&quot;C:\\Program Files\\Everything\\Everything.exe -p .&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Method to add &lt;code&gt;Bash here&lt;/code&gt; in your right-click context.&lt;/p&gt;
&lt;h2 id=&quot;Basic-Idea&quot;&gt;&lt;a href=&quot;#Basic-Idea&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MapReduce summary</title>
    <link href="http://yoursite.com/2018/01/22/2018-01-22-MapReduce/"/>
    <id>http://yoursite.com/2018/01/22/2018-01-22-MapReduce/</id>
    <published>2018-01-21T16:00:00.000Z</published>
    <updated>2019-07-30T11:35:04.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要，Intro"><a href="#摘要，Intro" class="headerlink" title="摘要，Intro"></a>摘要，Intro</h2><p><a href="https://research.google.com/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">MapReduce</a>: 一种编程模型，产生、处理大数据集</p><p>并行、分布式的实现细节对程序员透明</p><p>Map:对输入中的每一个Logical “record”，应用Map操作，计算出一组中间KVPairs</p><p>Reduce: 对中间KVpairs中key相同的pair进行适当的合并</p><p>[TOC]</p><h2 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h2><p>map由用户编写，对输入的kvp产生一组中间kvp。MR库将key相同的中间value打包，传给reduce(通过迭代器Iterator传递，从而允许不连续存放)</p><p>reduce由用户编写，将value合并为可能更小的value集合(通常只产生0或1个输出)。</p><blockquote><p>example: 统计单词出现次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; map(String key, String value):</span><br><span class="line">&gt;   <span class="comment"># key: document name</span></span><br><span class="line">&gt;   <span class="comment"># value: content</span></span><br><span class="line">&gt;   <span class="keyword">for</span> w <span class="keyword">in</span> value:</span><br><span class="line">&gt;     EmitIntermediate(w, <span class="string">"1"</span>)</span><br><span class="line">&gt; reduce(Stringkey, Iterator values):</span><br><span class="line">&gt;   <span class="comment"># key: a word</span></span><br><span class="line">&gt;   <span class="comment"># values: list of counts</span></span><br><span class="line">&gt;   result = <span class="number">0</span></span><br><span class="line">&gt;   <span class="keyword">for</span> v <span class="keyword">in</span> values:</span><br><span class="line">&gt;     result += ParseInt(v)</span><br><span class="line">&gt;   Emit(AsString(result))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>中间key与value的类型与输出相同，但与输入不同</p><p>Our(?) C++实现传递值均为字符串，由用户解释</p><p>分布式Grep、URL访问频数统计、转置Web连接图、统计每个主机的高频关键词，单词索引，分布式排序</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>可有多种不同实现(针对不同设备)</p><p>机器错误经常出现</p><p>主节点(Master)、工作节点(Worker)</p><ol><li>MapReduce库将输入分块，Cluster中多台机器运行一个副本</li><li>副本中主结点分配Map与Reduce任务给其余结点</li><li>Map的结点读取输入块内容，获取KVP后传给map函数，中间KVP缓存于内存</li><li>内存中的中间KVP被周期划分，存入磁盘，磁盘位置传给主结点再传给reduce结点</li><li>reduce结点获得位置后调用RPC读取中间KVP，按key排序(可能外部排序)</li><li>reduce结点将同key的values传给reduce函数，结果写到最终输出文件的末尾</li><li>reduce完成后主结点唤醒用户，mapreduce返回</li></ol><h3 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h3><p>主结点周期ping所有结点</p><p>工作结点错误：已完成的map需重新进行，正在进行的map与reduce需重新进行(reduce结果存在Global File System)</p><p>reduce结点都将收到重执行的通知，从而从新结点重新读取</p><p>主结点错误：simple：定期保存恢复点。current：终止mapreduce，用户检查、重启</p><p>map与reduce输出的提交为原子的</p><p>输出被写入私有temp文件，reduce有一个这样的文件，map有R个</p><p>完成时：</p><ul><li>map完成时结点发给主节点临时文件名字。主结点收到已完成结点的消息，忽略；否则记录文件名</li><li>reduce完成时，原子更名将临时输出改为最终输出。若因为出错、备用机制使同一个reduce任务在多个机器执行，底层FS提供的原子更名操作保证FS只含其中一个结果</li></ul><p>确定性语义 不确定的语义</p><h3 id="局部"><a href="#局部" class="headerlink" title="局部"></a>局部</h3><p>GFS，3备份，map就近分配</p><h3 id="粒度"><a href="#粒度" class="headerlink" title="粒度"></a>粒度</h3><p>MR比机器数大很多，动态平衡，加速失败恢复。上限。R由用户指定。M使输入分为16~64MB</p><h3 id="备用任务"><a href="#备用任务" class="headerlink" title="备用任务"></a>备用任务</h3><p>接近完成时，将剩余任务调度给其他机器同时执行</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>划分函数：根据key用不同方式划分给reduce任务</li><li>顺序：中间kvp增序</li><li>合并：中间kvp发出前先又map机器执行局部合并</li><li>输入输出类型：text例子</li><li><strong>边界效应</strong>：？</li><li>信号处理程序，catch出错，通过UDP发给主节点，下一次跳过该记录</li><li>本地调试</li><li>http server，查看状态</li><li>counter</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>成功原因：</p><ol><li>首先，该模型即使是对于没有并行和分布式系统经验的程序员也是很易于使用的，因为它隐藏了并行化、容错机制、局部性优化、以及负载平衡的细节。</li><li>其次，很多种类的问题都很容易表示成MapReduce计算。例如，MapReduce被用于为Google的网络搜索服务的数据产生、排序、数据挖掘、机器学习、以及许多其它系统。</li><li>第三，我们已经开发了一个MapReduce的实现，可以扩展到包含上千台机器的大型集群。该实现可以高效使用这些机器的资源，因此适合于Google遇到的很多大型计算问题。</li></ol><p>经验：</p><ol><li>首先，约束这个编程模型令并行和分布式计算，以及令这些计算可容错，变得简单了。</li><li>其次，网络带宽是一种稀缺资源。我们系统中的很多优化都因此针对减少通过网络发送的数据总量：局部性优化允许我们从本地磁盘读，同时将中间文件写入本地磁盘也节省了网络带宽。</li><li>第三，备用执行可以用于减小缓慢的机器的影响，及应对机器失败和数据丢失。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要，Intro&quot;&gt;&lt;a href=&quot;#摘要，Intro&quot; class=&quot;headerlink&quot; title=&quot;摘要，Intro&quot;&gt;&lt;/a&gt;摘要，Intro&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://research.google.com/archive/m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Configure ur own github page</title>
    <link href="http://yoursite.com/2018/01/15/2018-01-15-configure-your-githubio/"/>
    <id>http://yoursite.com/2018/01/15/2018-01-15-configure-your-githubio/</id>
    <published>2018-01-15T07:50:41.000Z</published>
    <updated>2019-07-30T11:35:04.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h2><p>Layouts decides in what kind of format, each of your page will be presented.</p><p>In folder <code>_layouts</code> you can make your own layouts (the default layout is <code>page</code>). </p><p>Create <code>default.html</code> inside <code>_layouts</code> and add these into it:</p>undefined<h2 id="Posts"><a href="#Posts" class="headerlink" title="Posts"></a>Posts</h2><p>Create a <code>_post</code> directory. All your posts should be placed inside here and named as <code>YYYY-MM-DD-title-of-post.md</code>(or markdown, textile, see <a href="jekyllcn.com/docs/posts/">Jekyll posts</a>).</p><p>The post file should looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: single</span><br><span class="line">title: "first post"</span><br><span class="line">date: 2018-01-15 15:50:41 +8000</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">post content</span><br></pre></td></tr></table></figure><p>The header tells Jekyll that this file should be processd by Jekyll, and gives this file some attributes(<code>title</code> &amp; <code>date</code>), and you can use them for example the <code></code> inside <code>default.html</code>. The <code>layout</code> indicates which layout this post uses.</p><p>By default, you can use <code>post</code> for posts and <code>page</code> for htmls as layout without creating your own layout file.</p><p>To view your post, browse <a href="http://username.github.io/YYYY/MM/DD/name-of-yout-post" target="_blank" rel="noopener">http://username.github.io/YYYY/MM/DD/name-of-yout-post</a>.</p>**Note**: if you want Jekyll to ignore texts like `{{ this }}`, there are two ways:* replace `{{ this }}` with {{ "{{ this " }}}}* replace `{% this %}` with {{ "{% this " }}%}* place target texts inside `{% raw %} ... {{" {% endraw " }}%}`{% endraw %}<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>When you browse <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a>, you actually browse <code>index.html</code> at the repository’s root.</p><p>Here is a good <code>index.html</code> example that lists all your posts with title and date:</p>{% raw %}undefined{% endraw %}<p>See <a href="jekyllcn.com/docs/variables">Jekyll/variables</a> for more detail about the variables used here.</p><h2 id="More-customize"><a href="#More-customize" class="headerlink" title="More customize"></a>More customize</h2><p>By editing the <code>_config.yml</code> file, </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Layouts&quot;&gt;&lt;a href=&quot;#Layouts&quot; class=&quot;headerlink&quot; title=&quot;Layouts&quot;&gt;&lt;/a&gt;Layouts&lt;/h2&gt;&lt;p&gt;Layouts decides in what kind of format, each of yo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>研究生抢课脚本</title>
    <link href="http://yoursite.com/2018/01/12/2018-01-12-yjsqk/"/>
    <id>http://yoursite.com/2018/01/12/2018-01-12-yjsqk/</id>
    <published>2018-01-12T09:45:41.000Z</published>
    <updated>2019-07-30T11:35:04.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抢课脚本"><a href="#抢课脚本" class="headerlink" title="抢课脚本"></a>抢课脚本</h1><p>本文档脚本内容适用于USTC研究生选课系统</p><p>如下文所说，你<strong>需要指定自己想选的课程号</strong>，并<strong>可以修改你想要的每次查询时间间隔</strong></p><h3 id="方法1-浏览器console"><a href="#方法1-浏览器console" class="headerlink" title="方法1 浏览器console"></a>方法1 浏览器console</h3><p><strong>此方法需要每次打开选课主页手动粘贴运行脚本</strong></p><p>Chrome下，<code>F12</code>快捷键打开开发者工具</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/2.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><p>点击上方<code>Console</code>进入控制台(如上图红圈)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/3.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><p>确认当前在top域(如上图红圈)，在console中粘贴如下代码，并按回车：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里添加你想要的课程号们，不限制个数</span></span><br><span class="line"><span class="keyword">var</span> ids = [<span class="string">"CH6520501"</span>, <span class="string">"CH6620401"</span>, <span class="string">"CH2522301"</span>];</span><br><span class="line"><span class="comment">//在这里修改每多久查询一次，单位毫秒。不要过于频繁以免被服务器封禁。原为5000。</span></span><br><span class="line"><span class="keyword">var</span> times = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">var</span> got = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">    got.push(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inter = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> log_string = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> table = frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].document.children[<span class="number">0</span>].children[<span class="number">1</span>].children[<span class="number">0</span>].children[<span class="number">0</span>].children[<span class="number">2</span>].children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> line = get_line_with_id(table, ids[i]);</span><br><span class="line">        <span class="keyword">var</span> people = line.children[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">if</span> (got[i] === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (people.childNodes[<span class="number">0</span>].data != (people.childNodes[<span class="number">3</span>].innerText + <span class="string">"/"</span>)) &#123;</span><br><span class="line">                frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].xk(ids[i]);</span><br><span class="line">                got[i] = <span class="literal">true</span>;</span><br><span class="line">                alert(<span class="string">"class"</span> + toString(i) + <span class="string">" get!"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log_string = log_string + line.children[<span class="number">3</span>].children[<span class="number">0</span>].innerText + <span class="string">" : "</span> + people.childNodes[<span class="number">0</span>].data + people.childNodes[<span class="number">3</span>].innerText + <span class="string">"\n"</span>;</span><br><span class="line">                <span class="comment">//console.log(line.children[3].children[0].innerText + " : " + people.childNodes[0].data + people.childNodes[3].innerText);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; got.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (got[i] === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(log_string);</span><br><span class="line">            frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].cxdxkc();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clearInterval(inter);</span><br><span class="line">    alert(<span class="string">"all get!"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;, times);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_line_with_id</span>(<span class="params">table, id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; table.rows.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table.rows[i].children[<span class="number">2</span>].innerText == id) &#123;</span><br><span class="line">            <span class="keyword">return</span> table.rows[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每查询一次，脚本将在console中输出当次查询的人数结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/4.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><p>若你不想有这样的输出，将上图中<code>Default levels</code>中的<code>Info</code>取消勾选</p><p>当你想结束查询时，请<strong>刷新选课界面</strong></p><h3 id="方法2-使用插件Tampermonkey"><a href="#方法2-使用插件Tampermonkey" class="headerlink" title="方法2 使用插件Tampermonkey"></a>方法2 使用插件Tampermonkey</h3><p>此方法可以自动在选课页面打开时进行刷课，无需人工干预</p><p>在Chrome扩展商店中搜索Tampermonkey并安装，安装完成后在Chrome地址栏右侧将出现该扩展的图标：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/5.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><p>点击该图标，并选择添加新脚本，进入下图界面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/1.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><p>你可以：</p><ol><li>将上文中的代码粘贴到图中<code>// Your code here...</code>的位置，并用选课网页地址替换掉图中<code>match</code>之后的<code>http</code>开头的内容</li><li>(<strong>推荐</strong>)将编辑区中所有内容清除，替换为下文内容：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         yanjiusheng</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.1</span></span><br><span class="line"><span class="comment">// @description  multiple classes supported</span></span><br><span class="line"><span class="comment">// @author       Jeffery</span></span><br><span class="line"><span class="comment">// @match        http://mis.teach.ustc.edu.cn/gradLoginSuc.do</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="comment">//在这里添加你想要的课程号们，不限制个数</span></span><br><span class="line">    <span class="keyword">var</span> ids = [<span class="string">"CH6520501"</span>, <span class="string">"CH6620401"</span>, <span class="string">"CH2522301"</span>];</span><br><span class="line">    <span class="comment">//在这里修改每多久查询一次，单位毫秒。不要过于频繁以免被服务器封禁。原为5000。</span></span><br><span class="line">    <span class="keyword">var</span> times = <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">var</span> got = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">        got.push(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> inter = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> log_string = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> table = frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].document.children[<span class="number">0</span>].children[<span class="number">1</span>].children[<span class="number">0</span>].children[<span class="number">0</span>].children[<span class="number">2</span>].children[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ids.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> line = get_line_with_id(table, ids[i]);</span><br><span class="line">            <span class="keyword">var</span> people = line.children[<span class="number">8</span>];</span><br><span class="line">            <span class="keyword">if</span> (got[i] === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (people.childNodes[<span class="number">0</span>].data != (people.childNodes[<span class="number">3</span>].innerText + <span class="string">"/"</span>)) &#123;</span><br><span class="line">                    frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].xk(ids[i]);</span><br><span class="line">                    got[i] = <span class="literal">true</span>;</span><br><span class="line">                    alert(<span class="string">"class"</span> + toString(i) + <span class="string">" get!"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log_string = log_string + line.children[<span class="number">3</span>].children[<span class="number">0</span>].innerText + <span class="string">" : "</span> + people.childNodes[<span class="number">0</span>].data + people.childNodes[<span class="number">3</span>].innerText + <span class="string">"\n"</span>;</span><br><span class="line">                    <span class="comment">//console.log(line.children[3].children[0].innerText + " : " + people.childNodes[0].data + people.childNodes[3].innerText);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; got.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (got[i] === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(log_string);</span><br><span class="line">                frames[<span class="string">"mainFrame"</span>].frames[<span class="string">"I2"</span>].frames[<span class="string">"xkpFrame"</span>].cxdxkc();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clearInterval(inter);</span><br><span class="line">        alert(<span class="string">"all get!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;, times);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_line_with_id</span>(<span class="params">table, id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; table.rows.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table.rows[i].children[<span class="number">2</span>].innerText == id) &#123;</span><br><span class="line">                <span class="keyword">return</span> table.rows[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>点击保存按钮<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/6.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>启用脚本方法：</p><ul><li><p>打开选课标签页</p></li><li><p>点击Tampermonkey扩展按钮，将出现当前脚本的开关</p><p><img src="/uploads/2018-01-12-yjsqk/9.JPG" alt></p></li><li><p>打开该开关，并刷新选课页面(刷新后才开启生效)，若观察到隔指定时间(5000ms)页面自动查询，或在Chrome console看到课程人数的输出并且前缀数字增加，则为开启成功：</p><p><img src="/uploads/2018-01-12-yjsqk/4.JPG" alt></p></li></ul><p><em>Tip:</em> 你可以选择开课单位，以减少每次查找的流量、时间开销</p><p>关闭脚本方法：同启用脚本的方法，仅将打开开关改为关闭开关。别忘了刷新页面！</p><p><strong>Note：</strong>如果你有旧的抢课脚本，请在开启脚本的小弹窗关闭它并保持关闭，或在Tampermonkey管理面板永久删除它：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/7.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/uploads/2018-01-12-yjsqk/8.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;抢课脚本&quot;&gt;&lt;a href=&quot;#抢课脚本&quot; class=&quot;headerlink&quot; title=&quot;抢课脚本&quot;&gt;&lt;/a&gt;抢课脚本&lt;/h1&gt;&lt;p&gt;本文档脚本内容适用于USTC研究生选课系统&lt;/p&gt;
&lt;p&gt;如下文所说，你&lt;strong&gt;需要指定自己想选的课程号&lt;/stro
      
    
    </summary>
    
    
  </entry>
  
</feed>
